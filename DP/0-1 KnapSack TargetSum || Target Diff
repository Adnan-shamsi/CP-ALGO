int findTargetSumWays(vector<int>& nums, int S) {
        long long sum=0,n=0,cnt=0;
        for(auto el : nums)
        {
            n++;
            sum+=el;
            if(el==0) cnt++;
        }
        
        long long target=(S+sum)/2;
        
        // count subset_sum problem;
        if((S+sum)%2==0 && S<=sum)
		{
			
			int dp[n+1][target+1];
			//initialisation
			for(int i=0;i<n+1;i++)
				for(int j=0;j<target+1;j++ )
					{
						if(i==0) dp[i][j]=0;
						if(j==0) dp[i][j]=1; 
	
					}
			
			//iteration
			
			for(int i=1;i<n+1;i++)
				for(int j=1;j<target+1;j++ )
					{
						
                         if(nums[i-1]==0) dp[i][j]=dp[i-1][j];
						else if(nums[i-1]>j)	
						{
                            dp[i][j]=dp[i-1][j];
							
						}	
						else
						{
							dp[i][j]= dp[i-1][j-nums[i-1]] + dp[i-1][j];
						}				
					}
			return dp[n][target]*pow(2,cnt);
		}
		else
		{
			return 0;
		}
        
    }
